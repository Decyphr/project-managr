datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model File {
  id   String @id @unique @default(cuid())
  blob Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     Image?
}

model Image {
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fileId String @unique

  contentType String
  altText     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User?
}

model Role {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Permission {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]
}

model User {
  id       String  @id @unique @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image   Image?  @relation(fields: [imageId], references: [fileId])
  imageId String? @unique

  password    Password?
  notes       Note[]
  roles       Role[]
  session     Session[]
  entries     Entry[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Session {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  expirationDate DateTime
}

model Note {
  id        String   @id @unique @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String
}


// CMS Models
// Define the model for collections
model Collection {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt

  title         String
  handle        String     @unique
  description   String?    @default("")
  
  fields        Field[]
  entries       Entry[]
}

// Define the model for fields
model Field {
  id            String     @id @default(cuid())

  title         String
  handle        String
  sortOrder     Int
  type          String
  description   String?    @default("")     
  isRequired    Boolean?   @default(false)

  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt
  
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  options      FieldOptions[]
  values       FieldValue[]

  @@unique([collectionId, handle])
}

model FieldOptions {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt
  
  fieldId       String
  field         Field      @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}

model Entry {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt

  title         String
  slug          String     @unique

  collectionId String
  collection   Collection  @relation(fields: [collectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  authorId      String
  author        User       @relation(fields: [authorId], references: [id])

  fields       FieldValue[]
}

model FieldValue {
  id          String   @id @default(cuid())

  textValue     String?  @default("")
  booleanValue  Boolean? @default(false)

  fieldId     String
  field       Field     @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  entryId String
  entry   Entry     @relation(fields: [entryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([fieldId, entryId])
}